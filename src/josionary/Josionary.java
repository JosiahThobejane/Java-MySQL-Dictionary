/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package josionary;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Josiah
 */
public class Josionary extends javax.swing.JFrame {
        
    /**
     * Creates new form 
     */
    public Josionary() {
        initComponents();               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        wordDescription = new javax.swing.JTextArea();
        searchField = new javax.swing.JTextField();
        addwordBTN = new javax.swing.JButton();
        searchBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        wordsList = new javax.swing.JList<>();
        updateWordBTN = new javax.swing.JButton();
        deleteWordBTN = new javax.swing.JButton();
        deleteAllWordsBTN = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Josionary");
        setLocation(new java.awt.Point(150, 150));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        wordDescription.setEditable(false);
        wordDescription.setColumns(20);
        wordDescription.setRows(5);
        jScrollPane2.setViewportView(wordDescription);

        searchField.setText("SEARCH WORD");

        addwordBTN.setText("Add Word");
        addwordBTN.setName("addwordBTN"); // NOI18N
        addwordBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addwordBTNActionPerformed(evt);
            }
        });

        searchBTN.setText("SEARCH");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });

        wordsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        wordsList.setToolTipText("");
        jScrollPane1.setViewportView(wordsList);

        updateWordBTN.setText("Update Word");
        updateWordBTN.setName("addwordBTN"); // NOI18N
        updateWordBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWordBTNActionPerformed(evt);
            }
        });

        deleteWordBTN.setText("Delete Word");
        deleteWordBTN.setName("addwordBTN"); // NOI18N
        deleteWordBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWordBTNActionPerformed(evt);
            }
        });

        deleteAllWordsBTN.setText("Delete All Words");
        deleteAllWordsBTN.setName("addwordBTN"); // NOI18N
        deleteAllWordsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllWordsBTNActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addwordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateWordBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteWordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteAllWordsBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addwordBTN)
                    .addComponent(updateWordBTN)
                    .addComponent(deleteWordBTN)
                    .addComponent(deleteAllWordsBTN))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void addwordBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addwordBTNActionPerformed
        AddWordWin addWord = new AddWordWin();
        addWord.show(); 
    }//GEN-LAST:event_addwordBTNActionPerformed

    //search a word
    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        
        //holds the word a user is trying to search for
        String word = searchField.getText();
                
        Engine engine = new Engine();
                
        DefaultListModel<String> listModel = new DefaultListModel<>();
        
        try {            
            PreparedStatement ps = engine.connection.prepareStatement("SELECT * FROM wordsdata "
                    + "WHERE Word LIKE '%" + word 
                    + "' OR Word LIKE '%" + word + "%'"
                    + "OR Word LIKE '" + word +"%' OR Word='" + word + "'");
            
            ResultSet res = ps.executeQuery();
            
            while(res.next())
            {               
                //populate the listmodel with the searched word(s)
                listModel.addElement(res.getString("Word"));
            }
           
            //parse the words to the JList
            wordsList.setModel(listModel);
            
            //close the connection
            engine.connection.close();
        } catch(SQLException s) {        
            JOptionPane.showMessageDialog(null, "Error Occured");
        }           
    }//GEN-LAST:event_searchBTNActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
      
       Engine engine = new Engine();      
       DefaultListModel<String> listM = new DefaultListModel<>();
                       
        //retrieve words from the database and add them to the JList
        try {
            PreparedStatement ps = engine.connection.prepareStatement("SELECT * FROM wordsdata ORDER BY Word ASC");
            
            ResultSet rs = ps.executeQuery();
            
            while(rs.next())
            {
                String word = rs.getString("Word");
               
                //add words to the list model
                listM.addElement(word);                
            }                         
        } catch(SQLException ee) {
           JOptionPane.showMessageDialog(null, ee.toString());
        }        
        //populate the JList with words from the database
        wordsList.setModel(listM);
       
        
        //this event updates a word description once a specific word has been selected, in real-time.
        wordsList.addListSelectionListener((ListSelectionEvent event) -> {
            if(!event.getValueIsAdjusting())
            {               
                //retrieve the selected word description from the database                
                try {                   
                    PreparedStatement ps = engine.connection.prepareStatement("SELECT WORD_DES FROM wordsdata WHERE Word='" + wordsList.getSelectedValue() + "'" );
                        
                    ResultSet result = ps.executeQuery(); 
                                        
                    while(result.next())
                    {                        
                        wordDescription.setText(result.getString("WORD_DES"));                        
                    }                                          
                } catch(SQLException ee) {
                    JOptionPane.showMessageDialog(null, ee.toString());
                }                                                
            }
       });
      
    }//GEN-LAST:event_formWindowOpened

    private void updateWordBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWordBTNActionPerformed
        UpdateWord up = new UpdateWord();
        up.show();
    }//GEN-LAST:event_updateWordBTNActionPerformed

    private void deleteWordBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWordBTNActionPerformed
        DeleteWord dl = new DeleteWord();
        dl.show();       
        
    }//GEN-LAST:event_deleteWordBTNActionPerformed

    private void deleteAllWordsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllWordsBTNActionPerformed
        //this is gonna be just a sql command
        //the command deletes all words.
        Engine eng = new Engine();
        
        try {            
            PreparedStatement ps = eng.connection.prepareStatement("DELETE * FROM wordsdata");
            ps.executeUpdate();
            
            eng.connection.close();
        } catch(SQLException ee) {
            JOptionPane.showMessageDialog(null, ee.toString());
        }
    }//GEN-LAST:event_deleteAllWordsBTNActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Josionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Josionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Josionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Josionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Josionary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton addwordBTN;
    public javax.swing.JButton deleteAllWordsBTN;
    public javax.swing.JButton deleteWordBTN;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JButton searchBTN;
    public javax.swing.JTextField searchField;
    public javax.swing.JButton updateWordBTN;
    public javax.swing.JTextArea wordDescription;
    public javax.swing.JList<String> wordsList;
    // End of variables declaration//GEN-END:variables
}
